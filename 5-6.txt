/**面试题02.04.分割链表 58min，老师用的是带头的链表，是自己开辟空间，然后free，其实用带头的链表更优，不用考虑头节点是否为0
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* partition(struct ListNode* head, int x){//不用开辟空间，因为是把main里面
//已经申请的空间赋值给这些临时开创的变量，当这些变量被销毁之后，那片空间是还存在的，
    struct ListNode*cur=head,*lesstail,*lesshead,*moretail,*morehead;//创建两个链表，用来存放
    //小于X的节点和大于X的节点，本质是通过头尾指针变量对原本的链表进行重新排序
    lesstail=lesshead=morehead=moretail=NULL;
    while(cur)
    {
        if(cur->val<x)
        {
            if(lesshead==NULL)
            {
               lesshead=lesstail=cur;
               cur=cur->next;
            }
            else
            {
                lesstail->next=cur;
                cur=cur->next;
                lesstail=lesstail->next;
            }
        }
        else
        {
            if(morehead==NULL)
            {
                morehead=moretail=cur;
                cur=cur->next;
            }
            else
            {
                moretail->next=cur;
                moretail=moretail->next;
                cur=cur->next;
            }
        }
    }
    if(moretail)//如果是空指针。
    {
     moretail->next=NULL;
    }
    if(lesshead==NULL)//如果都大于X，则小于链表里面全是空，直接返回more链表
    {
        return morehead;
    }
    
    lesstail->next=morehead;//避免出现环状链表
    
    //连接两个链表
    return lesshead;


}




























/**回文链表，和老师写的完全差不多，加油
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* midfun(struct ListNode*head)//半个小时，牛批
{
    struct ListNode*slow=head,*fast=head;
    while(fast&&fast->next)
    {
        slow=slow->next;
        fast=fast->next->next;
    }return slow;
}
struct ListNode* reverse(struct ListNode*head)
{
    struct ListNode*cur=head;
    struct ListNode*tail=NULL;
    while(cur)
    {
        struct ListNode*next=cur->next;
        cur->next=tail;
        tail=cur;
        cur=next;
    }
    return tail;
}

bool isPalindrome(struct ListNode* head){//找中间节点，然后逆置后半段，再比较两段是否相同
    struct ListNode*mid=midfun(head);
    struct ListNode*newhead= reverse(mid);
    struct ListNode*cur1=head,*cur2;
    cur2=newhead;
    while(cur1&&cur2)
    {
        if(cur1->val!=cur2->val)
        {
            return false;
        }
        else
        {
            cur1=cur1->next;
            cur2=cur2->next;
        }
    }
    return true;
}









/**找链表的相交节点
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 思路：先判断俩链表最后一个节点相同不，不相同一定不相交，相同再分别统计他俩的长度，然后更长的那个先走差值步数，然后遍历，找到他俩相同的那个节点
 * };
 */
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
    struct ListNode*curA=headA,*curB=headB,*tailB,*tailA;//36min
    int a=0,b=0;
    while(curA)
    {
        a++;
        tailA=curA;
        curA=curA->next;
    }
    while(curB)
    {
        b++;
        tailB=curB;
        curB=curB->next;
    }
    curB=headB;
    curA=headA;
    int sub=abs(a-b);//printf("%d",sub);
    if(tailA!=tailB)
    {
        return NULL;
    }
    else
    {
        if(b>a)
        {
          while(sub--)
          {
            
            curB=curB->next;
          }
        }
        else
        {
            while(sub--)
            {
                
                curA=curA->next;
            }
        }
        while(curB!=curA&&curA&&curB)
        {
            curA=curA->next;
            curB=curB->next;
        }
    }
    return curB;
}






/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;快慢指针，这个证明更重要，面试
 *     struct ListNode *next;
 * };9min
 */
bool hasCycle(struct ListNode *head) {
    struct ListNode*fast=head,*slow=head;
    while(fast&&fast->next)
    {
        fast=fast->next->next;
        slow=slow->next;
        if(fast==slow)
        {
            return true;
        }
    }
    return false;
}








/**20min
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };牛逼啊这个证明
 */
struct ListNode *detectCycle(struct ListNode *head) {
    struct ListNode*fast=head,*slow=head;
    
    while(fast&&fast->next)
    {
        fast=fast->next->next;
        slow=slow->next;
        if(slow==fast)//相遇了
        {
           struct ListNode*meet=slow;//记录这个相遇点,让头指针从头开始和meet走一样的路程，当他们相
//相等时就是入环点
           while(head!=meet)
           {
               head=head->next;
               meet=meet->next;
           }
           return meet;
           
        }
    }
    return NULL;
}





/**59min,我竟然独立写出来了，无语为什么我今天第一次oj花时间和这个差不多
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *next;
 *     struct Node *random;
 * };
 */

struct Node* copyRandomList(struct Node* head) {
	struct Node*cur=head;
    if(head==NULL)
    return NULL;
    while(cur)//复制新的节点并插入该节点，
    {
        struct Node*next=cur->next;
        struct Node*newNode=(struct Node*)malloc(sizeof(struct Node));
        newNode->val=cur->val;
        newNode->random=newNode->next=NULL;
        cur->next=newNode;
        newNode->next=next;
        cur=next;
    }
    cur=head;
    while(cur)
    {
        if(cur->random==NULL)
        {
            cur->next->random=NULL；//给新开辟的节点们链接random之间的关系
            cur=cur->next->next;
        }
        else
        {
            cur->next->random=cur->random->next;
            cur=cur->next->next;
        }
    }
    cur=head;
    struct Node*newhead=NULL;
    if(cur)
    newhead=cur->next;
    struct Node*ret=newhead;
    while(newhead&&newhead->next)
    {
        struct Node*next1=newhead->next;\\难点，解开原节点和新的节点之间的链接，并且恢复原链表，，同时构造完整的要返回的链表
        cur->next=next1;
        newhead->next=next1->next;
        cur=next1;
        newhead=next1->next;
    }newhead->next=NULL;
    return ret;
}


