typedef struct Stack{//53min，尼玛，竟然过了，有效的括号
      char *a;
      int top;
      int capacity;
}ST;
void StackDestroy(ST*ps)
{
    ps->a=NULL;
    ps->top=ps->capacity=0;
}
void  StackInit(ST*ps)
{
      ps->a=NULL;
      ps->top=ps->capacity=0;
}
void StackPush(ST*ps,char ch)
{
    if(ps->top==ps->capacity)
    {
        int newcapacity=(ps->capacity==0)?5:ps->capacity*2;
        ST*tmp=(ST*)realloc(ps->a,sizeof(char)*newcapacity);
        if(tmp)
        {
            ps->a=tmp;
        }
        ps->capacity=newcapacity;
    }
    ps->a[ps->top]=ch;
    ps->top++;

}
bool StackEmpty(ST*ps)
{
    return ps->top==0;
}
char StackTop(ST*ps)
{
    
    return ps->a[ps->top-1];
}
 void StackPop(ST*ps)
 {
     ps->top--;
 }
bool isValid(char * s){
      ST pStack;
      StackInit(&pStack);
      while(*s)
      {
          if(*s=='('
          ||*s=='{'
          ||*s=='[')
          {
              StackPush(&pStack,*s);//如果是左括号就入栈
          }
          else
          {
                  if(!StackEmpty(&pStack))
                  {
                       if((StackTop(&pStack)=='{'&&*s!='}')||
                       (StackTop(&pStack)=='('&&*s!=')')||
                       (StackTop(&pStack)=='['&&*s!=']'))   
                       {
                           StackDestroy(&pStack);
                           return false;//如果和栈顶的元素相比不相等
                       }
                  }
                 
                 if(StackEmpty(&pStack))
                 {
                    StackDestroy(&pStack);
                     return false;//如果此时栈里面没有元素
                 }
                 StackPop(&pStack);
          }
          s++;
      }
      if(!StackEmpty(&pStack))
      {
         StackDestroy(&pStack);
          return false;
      }//说明栈里面还有左括号，说明没有匹配完，
     StackDestroy(&pStack);
      return true;

}





//用队列实现栈
typedef int QDataType;//这题对我来说真的难，结构比较复杂，逻辑倒是没得那么难；不记得了可以去看杭哥的代码
typedef struct QueueNode
{
	QDataType data;
	struct QueueNode* next;//队列的节点，与链表无异
}QueueNode;


typedef struct Queue//控制队列的头尾指针被封装在一个结构体里面
{
	QueueNode* head;
	QueueNode* tail;
}Queue;
//顺序表传的是一级指针，单链表传递二级指针，带头双向循环链表传递一级指针，栈传递一级指针，队列传递一级指针，


void QueueInit(Queue* p);
void QueueDestroy(Queue* p);
void QueuePush(Queue* p,QDataType x);
void QueuePop(Queue* p);

QDataType QueueBack(Queue* p);
QDataType QueueFront(Queue* p);
bool QueueEmpty(Queue* p);
int QueueSize(Queue* p);
void QueuePrint(Queue* p);


void QueueInit(Queue* p)
{
	assert(p);
	p->head = NULL;
	p->tail = NULL;
}
void QueueDestroy(Queue* p)
{
	assert(p);
	QueueNode* cur = p->head;
	while (cur!= NULL)
	{
		QueueNode* next = cur->next;
		free(cur);
		cur = next;
	}
	p->tail=p->tail = NULL;
}
QueueNode* BuyNewnode(QDataType x)//返回一个包含next和data的节点
{
	QueueNode* tmp = (QueueNode*)malloc(sizeof(QueueNode));
	if (tmp)
	{
		tmp->data = x;
		tmp->next = NULL;
		return tmp;
	}
	else
	{
		printf("malloc failed\n");
		exit(-1);
	}
}



void QueuePush(Queue* p, QDataType x)
{
	assert(p);
	QueueNode* newnode= BuyNewnode(x);
	if (p->head == NULL)
	{
		p->head=p->tail = newnode;
	}
	else
	{
		p->tail->next = newnode;
		p->tail = newnode;
	}
}


void QueuePrint(Queue* p)
{
	assert(p);
	assert(p->head);
	QueueNode* cur = p->head;
	while (cur !=NULL)
	{
		printf("%d ", cur->data);
		cur = cur->next;
	}
	printf("\n");
}




void QueuePop(Queue* p)
{
	assert(p);
	assert(p->head);
	QueueNode* next = p->head->next;
	free(p->head);
	p->head = next;
	if (p->head == NULL)
	{
		p->tail = NULL;
	}
}

QDataType QueueBack(Queue* p)
{
	assert(p);
	assert(p->head);
	return p->tail->data;
}
QDataType QueueFront(Queue* p)
{
	assert(p);
	assert(p->head);
	return p->head->data;

}
bool QueueEmpty(Queue* p)
{
	assert(p);
	return p->head == NULL;
}
int QueueSize(Queue* p)
{
	QueueNode* cur = p->head;
	int i = 0;
	while (cur)
	{
		i++;
		cur = cur->next;
	}
	return i;
}


typedef struct {
    Queue q1;
    Queue q2;//定义一个结构体包含两个队列，队列里面包含的是head和tail
} MyStack;


MyStack* myStackCreate() {
    MyStack*ret=(MyStack*)malloc(sizeof(MyStack));//定义一个栈指针，通过指针解引用对栈里面的队列进行初始化，传递的是队列的地址，通过地址解引用对head和tail进行操作
    QueueInit(&(ret->q1));
    QueueInit(&(ret->q2));
    return ret;
}

void myStackPush(MyStack* obj, int x) {
    if(!QueueEmpty(&obj->q1))//判断哪一个队列不是空的，就把这个队列的地址传递过去，通过地址解引用把数据插入到这个队列里面，始终要保证其中一个队列是空的
    {
        QueuePush(&obj->q1,x);
    }
    else
    {
        QueuePush(&obj->q2,x);
        
    }

}

int myStackPop(MyStack* obj) {
    Queue *empty=&obj->q1;
    Queue *nonempty=&obj->q2;
    if(!QueueEmpty(&obj->q1))
    {
        empty=&obj->q2;
        nonempty=&obj->q1;
    }
    while(QueueSize(nonempty)>1)//当有数据的那个队列的元素个数大于1时，不断把这个队列的元素一个一个暂存到空的队列里面去，每次存一个，非空的队列就pop一个，直到只剩最后一个元素就是栈顶的元素，然后Popz这个元素
//就达到了后进先出的效果
    {
        QueuePush(empty,QueueFront(nonempty));
        QueuePop(nonempty);
    }
    int front=QueueFront(nonempty);
    QueuePop(nonempty);
    return front;

}

int myStackTop(MyStack* obj) {
    if(!QueueEmpty(&obj->q1))//返回队列的尾数据，看起来就像是栈顶元素
    {
        return QueueBack(&obj->q1);
    }
    else
    {
        return QueueBack(&obj->q2);
        
    }

}

bool myStackEmpty(MyStack* obj) {
    return QueueEmpty(&obj->q1)&&QueueEmpty(&obj->q2);

}

void myStackFree(MyStack* obj) {
    QueueDestroy(&obj->q1);//这里调试花了一会，
    QueueDestroy(&obj->q2);
    free(obj);


}







//用栈实现队列

typedef int STDataType;
typedef struct Stack 
{
	STDataType* a;
	int top;
	int capacity;
}ST;


void StackInit(ST* ps);
void StackDestroy(ST* ps);
void StackPush(ST* ps, STDataType x);
void StackPop(ST* ps);
STDataType StackTop(ST* ps);
int StackSize(ST* ps);
bool StackEmpty(ST* ps);
void StackPrint(ST* ps);



void StackInit(ST* ps)
{
	assert(ps);
	ps->a = NULL;
	ps->top = ps->capacity = 0;
}
void StackDestroy(ST* ps)
{
	assert(ps);
	//assert(ps->a);
	free(ps->a);
	ps->a = NULL;
	ps->capacity = ps->top = 0;
}
void CheckCapacity(ST* ps)
{
	assert(ps);
	if (ps->capacity == ps->top)
	{
		int newCapacity = (ps->capacity == 0) ? 5 : ps->capacity * 2;
		ST*tmp= (STDataType*)realloc(ps->a,newCapacity*sizeof(STDataType));//很严重的错误，写成了malloc,导致申请新的空间的时候原有的数据丢失，谨记谨记！！！！！
		if (tmp)
		{
			ps->a = tmp;
		}
		else
		{
			printf("realloc failed\n");
			exit(-1);
		}
		ps->capacity = newCapacity;
	}
}

void StackPush(ST* ps, STDataType x)
{
	assert(ps);
	CheckCapacity(ps);
	ps->a[ps->top] = x;
	ps->top++;
}
void StackPrint(ST* ps)
{
	
	assert(ps);
	assert(ps->top);
	int i = 0;
	while (i < ps->top)
	{
		printf("%d ", ps->a[i]);
		i++;
	}
	printf("\n");
}
void StackPop(ST* ps)
{
	assert(ps);
	assert(ps->top);
	ps->top--;

}
STDataType StackTop(ST* ps)
{
	assert(ps);
	assert(ps->top);
	return ps->a[ps->top - 1];
}
int StackSize(ST* ps)
{
	assert(ps);
	
	return ps->top;
}
bool StackEmpty(ST* ps)
{
	assert(ps);
	/*if (ps->top == 0)
	{
		return true;
	}
	else
	{
		return false;
	}*/
	return ps->top == 0;
}
typedef struct {
    ST push;//一个栈拿来进数据，一个栈拿来出数据
    ST pop;
} MyQueue;


MyQueue* myQueueCreate() {
    MyQueue*ret=(MyQueue*)malloc(sizeof(MyQueue));
    StackInit(&ret->push);
    StackInit(&ret->pop);
    return ret;
}

void myQueuePush(MyQueue* obj, int x) {
    StackPush(&obj->push,x);
}

int myQueuePop(MyQueue* obj) {
    if(StackEmpty(&obj->pop))//如果pop里面时空的，那就把push里面的数据全部导入pop，这样刚好符合
    //先进先出的顺序，在pop那边出数据
    {
        while(StackSize(&obj->push))
        {
        StackPush(&obj->pop,StackTop(&obj->push));
        StackPop(&obj->push);
        }
    }int top=StackTop(&obj->pop);
    StackPop(&obj->pop);
    return top;
}

int myQueuePeek(MyQueue* obj) {
    if(StackEmpty(&obj->pop))
    {
         while(StackSize(&obj->push))
        {
        StackPush(&obj->pop,StackTop(&obj->push));
        StackPop(&obj->push);
        }

    }
    int top=StackTop(&obj->pop);
    return top;
    

}

bool myQueueEmpty(MyQueue* obj) {
    return StackEmpty(&obj->push)&&StackEmpty(&obj->pop);

}

void myQueueFree(MyQueue* obj) {
    StackDestroy(&obj->push);
    StackDestroy(&obj->pop);
    free(obj);
}








//设计循环队列，我是不咋想得到的。。。但其实没那么难。。。
typedef struct {
    int *a;
    int front;
    int tail;
    int k;

} MyCircularQueue;

bool myCircularQueueIsEmpty(MyCircularQueue* obj) ;
bool myCircularQueueIsFull(MyCircularQueue* obj) ;

MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue*ret=(MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    ret->a=(int*)malloc(sizeof(int)*(k+1));
    ret->front=0;
    ret->tail=0;
    ret->k=k;//what??????
    return ret;
}

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if(myCircularQueueIsFull(obj))
    return false;
    else
    {
        obj->a[obj->tail]=value;
        obj->tail++;
        obj->tail%=(obj->k+1);
    }
    return true;
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
    return false;
    else
    {
     obj->front++;
     obj->front%=(obj->k+1);
    }
    return true;

}

int myCircularQueueFront(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
    return -1;
    else
    {
        return obj->a[obj->front];
    }
}

int myCircularQueueRear(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
    return -1;
    else
    {
        if(obj->tail==0)
        {
            return obj->a[obj->k];
        }
        else
        return obj->a[obj->tail-1];
    }
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
   return obj->front==obj->tail;
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
   return (obj->tail+1)%(obj->k+1)==obj->front;
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->a);
    obj->a=NULL;
    free(obj);

}

